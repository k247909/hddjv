# .github/workflows/aeon-rdp.yml
name: RDP-ANYDESK

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - uses: actions/checkout@v3

    - name: Setup Secrets and Environment Variables
      run: |
        echo "RDP_PASS=${{ secrets.RDP_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "RDP_USER=TOOLBOXLAP" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "ANYDESK_PASS=${{ secrets.ANYDESK_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "PERSISTENT_DIR=C:\Users\TOOLBOXLAP\PersistentData" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_ID=${{ secrets.GIST_ID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell

    - name: Install Python Libraries for Gist Access
      run: pip install requests
      shell: cmd

    - name: Restore Persistent Data from Gist
      run: |
        mkdir $env:PERSISTENT_DIR -Force
        python ./scripts/restore_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
      shell: pwsh

    - name: Install Tailscale (Stable MSI Method)
      run: |
        $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
        $installerPath = "$env:TEMP\tailscale.msi"
        Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
        Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
        Remove-Item $installerPath -Force
        Start-Sleep -Seconds 5
      shell: powershell

    - name: Establish Tailscale Connection & Get IP (Path Fixed)
      run: |
        $TailscaleExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
        & $TailscaleExe up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=AEON-RDP-WIN-$env:GITHUB_RUN_ID
        $tsIP = $null
        $retries = 0
        while (-not $tsIP -and $retries -lt 15) {
            $tsIP = & $TailscaleExe ip -4
            Start-Sleep -Seconds 5
            $retries++
        }
        if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
        }
        echo "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell

    - name: Install and Configure AnyDesk (Fixed - Use MSI Only)
      run: |
        # استخدام MSI فقط لأنه أكثر استقرارًا في البيئات غير التفاعلية
        $msiUrl = "https://download.anydesk.com/AnyDesk.msi"
        $installerPath = "$env:TEMP\AnyDesk.msi"
        
        Write-Host "Downloading AnyDesk MSI from: $msiUrl"
        try {
            Invoke-WebRequest -Uri $msiUrl -OutFile $installerPath -UseBasicParsing
            Write-Host "Download completed successfully"
        } catch {
            Write-Error "Failed to download AnyDesk MSI: $($_.Exception.Message)"
            exit 1
        }

        Write-Host "Installing AnyDesk using MSI..."
        $process = Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart", "/L*V", "`"$env:TEMP\anydesk_install.log`"" -PassThru -Wait
        $exitCode = $process.ExitCode
        
        # قراءة سجل التثبيت للتحقق
        if (Test-Path "$env:TEMP\anydesk_install.log") {
            $logContent = Get-Content "$env:TEMP\anydesk_install.log" -Tail 20
            Write-Host "Last 20 lines of install log:"
            $logContent | ForEach-Object { Write-Host $_ }
        }
        
        if ($exitCode -ne 0) {
            Write-Warning "MSI installation exited with code: $exitCode"
            # نحاول المتابعة رغم ذلك لأن AnyDesk قد يكون مثبتًا
        }

        # تنظيف ملف التثبيت
        Remove-Item $installerPath -Force -ErrorAction SilentlyContinue

        # البحث عن AnyDesk.exe مع محاولات متعددة
        $ADExePath = $null
        $maxAttempts = 10
        for ($i = 1; $i -le $maxAttempts; $i++) {
            Write-Host "Attempt $i to find AnyDesk.exe..."
            
            $possiblePaths = @(
                "$env:ProgramFiles\AnyDesk\AnyDesk.exe"
                "${env:ProgramFiles(x86)}\AnyDesk\AnyDesk.exe"
                "$env:ProgramFiles\AnyDeskMSI\AnyDesk.exe"
            )
            
            foreach ($path in $possiblePaths) {
                if (Test-Path $path) {
                    $ADExePath = $path
                    Write-Host "Found AnyDesk at: $ADExePath"
                    break
                }
            }
            
            if ($ADExePath) { break }
            
            # إذا لم نجده، ننتظر ثم نحاول مرة أخرى
            Start-Sleep -Seconds 10
        }

        if (-not $ADExePath) {
            Write-Error "AnyDesk.exe not found after $maxAttempts attempts. Checking installed programs..."
            # عرض البرامج المثبتة للمساعدة في التشخيص
            Get-WmiObject -Class Win32_Product | Select-Object Name, Version | Format-Table
            exit 1
        }

        # الانتظار لضمان تشغيل الخدمة
        Write-Host "Waiting for AnyDesk service to start..."
        Start-Sleep -Seconds 15

        # محاولة ضبط كلمة المرور
        $passwordSet = $false
        for ($i = 1; $i -le 5; $i++) {
            try {
                Write-Host "Attempt $i to set AnyDesk password..."
                & "$ADExePath" --set-password="$env:ANYDESK_PASS"
                if ($LASTEXITCODE -eq 0) {
                    $passwordSet = $true
                    Write-Host "Password set successfully"
                    break
                }
            } catch {
                Write-Warning "Failed to set password on attempt $i: $($_.Exception.Message)"
            }
            Start-Sleep -Seconds 5
        }

        if (-not $passwordSet) {
            Write-Warning "Failed to set AnyDesk password via CLI. Continuing anyway..."
        }

        # الحصول على AnyDesk ID
        $ADID = $null
        $maxIdAttempts = 10
        for ($i = 1; $i -le $maxIdAttempts; $i++) {
            try {
                Write-Host "Attempt $i to get AnyDesk ID..."
                $rawId = & "$ADExePath" --get-id
                if ($rawId -and $rawId.Trim()) {
                    if ($rawId -match '\d{6,12}') {
                        $ADID = $Matches[0].Trim()
                    } else {
                        $ADID = $rawId.Trim()
                    }
                    Write-Host "Retrieved AnyDesk ID: $ADID"
                    break
                }
            } catch {
                Write-Warning "Failed to get ID on attempt $i: $($_.Exception.Message)"
            }
            Start-Sleep -Seconds 5
        }

        if (-not $ADID) {
            Write-Error "Could not retrieve AnyDesk ID after $maxIdAttempts attempts"
            exit 1
        }

        echo "ANYDESK_ID=$ADID" | Out-File -FilePath $env:GITHUB_ENV -Append
        Write-Host "AnyDesk configuration completed successfully"

      shell: powershell

    - name: Configure RDP User and Set Password
      run: |
        $password = $env:RDP_PASS
        $securePass = ConvertTo-SecureString $password -AsPlainText -Force

        if (-not (Get-LocalUser -Name "$env:RDP_USER" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "$env:RDP_USER" -Password $securePass -AccountNeverExpires
        }

        Add-LocalGroupMember -Group "Administrators" -Member "$env:RDP_USER"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "$env:RDP_USER"

        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Restart-Service -Name TermService -Force
      shell: powershell

    - name: Display Connection Details
      run: |
        Write-Host "--------------------------------------------------------"
        Write-Host "          SHADOWHACKER-GOD: DUAL CONNECTION INFO         "
        Write-Host "--------------------------------------------------------"
        Write-Host "   A. اتصال RDP عبر Tailscale (الأساسي):"
        Write-Host "      - المستخدم (User): $env:RDP_USER"
        Write-Host "      - كلمة مرور RDP (Password): ${{ secrets.RDP_PASSWORD }}"
        Write-Host "      - عنوان IP (IP/Address): $env:TAILSCALE_IP"
        Write-Host "--------------------------------------------------------"
        Write-Host "   B. اتصال AnyDesk (الاحتياطي/المباشر):"
        Write-Host "      - مُعرِّف AnyDesk (ID): $env:ANYDESK_ID"
        Write-Host "      - كلمة مرور AnyDesk (Password): ${{ secrets.ANYDESK_PASSWORD }}"
        Write-Host "--------------------------------------------------------"
      shell: powershell

    - name: Keep Alive and Data Sync Loop (Safe Shutdown)
      run: |
        Start-Sleep -Seconds 21000
        Write-Host "--- Executing final data save to Gist (5h 50m mark) ---"
        python ./scripts/save_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
        Write-Host "Data saved successfully. Shutting down. Auto-restart imminent."
      shell: powershell
