# .github/workflows/aeon-rdp.yml
name: AEON-RDP-TAILSCALE

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - uses: actions/checkout@v3

    - name: Setup Secrets and Environment Variables
      run: |
        echo "RDP_PASS=${{ secrets.RDP_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "RDP_USER=TOOLBOXLAP" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "ANYDESK_PASS=${{ secrets.ANYDESK_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "PERSISTENT_DIR=C:\Users\TOOLBOXLAP\PersistentData" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_ID=${{ secrets.GIST_ID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell

    - name: Install Python Libraries for Gist Access
      run: pip install requests
      shell: cmd

    - name: Restore Persistent Data from Gist
      run: |
        mkdir $env:PERSISTENT_DIR -Force
        python ./scripts/restore_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
      shell: pwsh

    - name: Install Tailscale (Stable MSI Method)
      run: |
        $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
        $installerPath = "$env:TEMP\tailscale.msi"
        Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
        Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
        Remove-Item $installerPath -Force
        Start-Sleep -Seconds 5
      shell: powershell

    - name: Establish Tailscale Connection & Get IP (Path Fixed)
      run: |
        $TailscaleExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
        & $TailscaleExe up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=AEON-RDP-WIN-$env:GITHUB_RUN_ID
        $tsIP = $null
        $retries = 0
        while (-not $tsIP -and $retries -lt 15) {
            $tsIP = & $TailscaleExe ip -4
            Start-Sleep -Seconds 5
            $retries++
        }
        if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
        }
        echo "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell

    - name: Install and Configure AnyDesk (Fixed URLs and Syntax)
      run: |
        # استخدام الروابط الصحيحة من الموقع الرسمي
        $candidateUrls = @(
            "https://download.anydesk.com/AnyDesk.msi",
            "https://anydesk.com/en/downloads/thank-you?dv=win_exe"
        )

        $ADInstallerPath = "$env:TEMP\AnyDeskInstaller"
        $downloaded = $false
        foreach ($url in $candidateUrls) {
            try {
                Write-Host "Trying to download AnyDesk from: $url"
                $ext = ".exe"
                if ($url -like "*.msi") {
                    $ext = ".msi"
                }
                $target = "$ADInstallerPath$ext"
                Invoke-WebRequest -Uri $url -OutFile $target -UseBasicParsing -ErrorAction Stop
                Write-Host "Downloaded to $target"
                $ADInstallerPath = $target
                $downloaded = $true
                break
            } catch {
                Write-Warning "Download failed for $url : $($_.Exception.Message)"
                continue
            }
        }

        if (-not $downloaded) {
            Write-Error "Failed to download AnyDesk from all candidate URLs. Exiting."
            exit 1
        }

        # تثبيت بناءً على امتداد الملف
        $ext = [System.IO.Path]::GetExtension($ADInstallerPath).ToLower()
        try {
            if ($ext -eq ".msi") {
                Write-Host "Installing MSI via msiexec..."
                Start-Process msiexec.exe -ArgumentList "/i", "`"$ADInstallerPath`"", "/quiet", "/norestart" -Wait -NoNewWindow
            } else {
                Write-Host "Installing EXE (using silent flag)..."
                Start-Process -FilePath $ADInstallerPath -ArgumentList "/S" -Wait -NoNewWindow
            }
        } catch {
            Write-Error "Installation step failed: $($_.Exception.Message)"
            exit 1
        }

        # البحث عن AnyDesk.exe باستخدام الصيغة الصحيحة للمتغيرات
        $possibleRoots = @($env:ProgramFiles, ${env:ProgramFiles(x86)})
        $ADExePath = $null
        foreach ($root in $possibleRoots) {
            if (-not $root) { continue }
            try {
                $found = Get-ChildItem -Path $root -Filter AnyDesk.exe -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
                if ($found) {
                    $ADExePath = $found.FullName
                    break
                }
            } catch {
                continue
            }
        }

        if (-not $ADExePath) {
            Write-Error "AnyDesk.exe not found after installation. Checking common locations..."
            # فحص المواقع الشائعة يدويًا
            $commonPaths = @(
                "$env:ProgramFiles\AnyDesk\AnyDesk.exe"
                "${env:ProgramFiles(x86)}\AnyDesk\AnyDesk.exe"
            )
            foreach ($path in $commonPaths) {
                if (Test-Path $path) {
                    $ADExePath = $path
                    Write-Host "Found AnyDesk at: $ADExePath"
                    break
                }
            }
            if (-not $ADExePath) {
                exit 1
            }
        }

        Write-Host "Found AnyDesk at: $ADExePath"

        # الانتظار ثم ضبط كلمة المرور
        Start-Sleep -Seconds 10
        try {
            & "$ADExePath" --set-password="$env:ANYDESK_PASS"
            Write-Host "AnyDesk password set successfully"
        } catch {
            Write-Warning "Failed to set AnyDesk password via CLI: $($_.Exception.Message)"
        }

        # استخراج ID مع إعادة محاولات
        $ADID = $null
        $retries = 0
        while (-not $ADID -and $retries -lt 10) {
            try {
                $raw = & "$ADExePath" --get-id
                if ($raw -and $raw.Trim()) {
                    if ($raw -match '\d{6,12}') {
                        $ADID = $Matches[0]
                    } else {
                        $ADID = $raw.Trim()
                    }
                    Write-Host "Retrieved AnyDesk ID: $ADID"
                    break
                }
            } catch {
                # تجاهل مؤقت
            }
            Start-Sleep -Seconds 3
            $retries++
        }

        if (-not $ADID) {
            Write-Error "Could not retrieve AnyDesk ID after multiple attempts. Exiting."
            exit 1
        }

        Write-Host "AnyDesk ID: $ADID"
        echo "ANYDESK_ID=$ADID" | Out-File -FilePath $env:GITHUB_ENV -Append

      shell: powershell

    - name: Configure RDP User and Set Password
      run: |
        $password = $env:RDP_PASS
        $securePass = ConvertTo-SecureString $password -AsPlainText -Force

        if (-not (Get-LocalUser -Name "$env:RDP_USER" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "$env:RDP_USER" -Password $securePass -AccountNeverExpires
        }

        Add-LocalGroupMember -Group "Administrators" -Member "$env:RDP_USER"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "$env:RDP_USER"

        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Restart-Service -Name TermService -Force
      shell: powershell

    - name: Display Connection Details
      run: |
        Write-Host "--------------------------------------------------------"
        Write-Host "          SHADOWHACKER-GOD: DUAL CONNECTION INFO         "
        Write-Host "--------------------------------------------------------"
        Write-Host "   A. اتصال RDP عبر Tailscale (الأساسي):"
        Write-Host "      - المستخدم (User): $env:RDP_USER"
        Write-Host "      - كلمة مرور RDP (Password): ${{ secrets.RDP_PASSWORD }}"
        Write-Host "      - عنوان IP (IP/Address): $env:TAILSCALE_IP"
        Write-Host "--------------------------------------------------------"
        Write-Host "   B. اتصال AnyDesk (الاحتياطي/المباشر):"
        Write-Host "      - مُعرِّف AnyDesk (ID): $env:ANYDESK_ID"
        Write-Host "      - كلمة مرور AnyDesk (Password): ${{ secrets.ANYDESK_PASSWORD }}"
        Write-Host "--------------------------------------------------------"
      shell: powershell

    - name: Keep Alive and Data Sync Loop (Safe Shutdown)
      run: |
        Start-Sleep -Seconds 21000
        Write-Host "--- Executing final data save to Gist (5h 50m mark) ---"
        python ./scripts/save_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
        Write-Host "Data saved successfully. Shutting down. Auto-restart imminent."
      shell: powershell
