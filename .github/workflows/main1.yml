# SHADOWHACKER-GOD: RDP Workflow (ULTIMATE FIX - Dynamic Path Finding)

name: AEON-RDP-TAILSCALE-ANYDESK

on:
  # الجدولة: لإعادة التشغيل التلقائي كل 6 ساعات
  schedule:
    - cron: '0 */6 * * *' 
  workflow_dispatch: 

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360 # المهلة القصوى لـ GitHub
    
    steps:
    - uses: actions/checkout@v3

    # 1. إعداد المتغيرات السرية والبيئة 
    - name: Setup Secrets and Environment Variables
      run: |
        echo "RDP_PASS=${{ secrets.RDP_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "RDP_USER=TOOLBOXLAP" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "ANYDESK_PASS=${{ secrets.ANYDESK_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "PERSISTENT_DIR=C:\Users\TOOLBOXLAP\PersistentData" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_ID=${{ secrets.GIST_ID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell
      
    # 2. تثبيت مكتبة requests
    - name: Install Python Libraries for Gist Access
      run: pip install requests
      shell: cmd

    # 3. استعادة البيانات الدائمة من Gist
    - name: Restore Persistent Data from Gist
      run: |
        mkdir $env:PERSISTENT_DIR -Force
        python ./scripts/restore_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
      shell: pwsh
      
    # 4. تثبيت Tailscale (FIXED & Stable)
    - name: Install Tailscale (Stable MSI Method)
      run: |
        $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi" 
        $installerPath = "$env:TEMP\tailscale.msi"
        Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
        Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
        Remove-Item $installerPath -Force
        Start-Sleep -Seconds 5 
      shell: powershell

    # 5. توصيل Tailscale والحصول على IP (FIXED: استخدام المسار الكامل)
    - name: Establish Tailscale Connection & Get IP (Path Fixed)
      run: |
        $TailscaleExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
        & $TailscaleExe up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=AEON-RDP-WIN-$env:GITHUB_RUN_ID
        $tsIP = $null
        $retries = 0
        while (-not $tsIP -and $retries -lt 15) { 
            $tsIP = & $TailscaleExe ip -4
            Start-Sleep -Seconds 5
            $retries++
        }
        if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
        }
        echo "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell
      
    # 6. تثبيت AnyDesk وتكوينه (FIXED: البحث الديناميكي عن المسار)
    - name: Install and Configure AnyDesk (Dynamic Path Fix)
      run: |
        $ADUrl = "https://download.anydesk.com/AnyDesk.exe" # رابط EXE (يعمل)
        $ADPath = "$env:TEMP\AnyDesk.exe"
        
        # 1. تنزيل AnyDesk.exe
        Invoke-WebRequest -Uri $ADUrl -OutFile $ADPath
        
        # 2. التثبيت الصامت
        Write-Host "--- Installing AnyDesk Silently ---"
        # محاولة التثبيت في المسار الافتراضي (X86)
        Start-Process $ADPath -ArgumentList "--install `"$env:PROGRAMFILES(X86)\AnyDesk`" --silent --start-with-win" -Wait
        
        # 3. الانتظار لضمان اكتمال التثبيت وبدء الخدمة
        Start-Sleep -Seconds 15 
        
        # 4. البحث الديناميكي عن AnyDesk.exe (الحل الحاسم)
        Write-Host "--- Dynamically locating AnyDesk.exe ---"
        $ADExePath = $null
        # البحث في المسارات المحتملة
        $SearchPaths = @("$env:PROGRAMFILES(X86)\AnyDesk\AnyDesk.exe", "$env:PROGRAMFILES\AnyDesk\AnyDesk.exe")
        foreach ($path in $SearchPaths) {
            if (Test-Path $path) {
                $ADExePath = $path
                Write-Host "AnyDesk.exe found at: $ADExePath"
                break
            }
        }
        
        if (-not $ADExePath) {
            Write-Error "Could not find AnyDesk.exe in any expected Program Files directory after installation. Exiting."
            exit 1
        }
        
        # 5. تعيين كلمة المرور للوصول غير المراقب
        Write-Host "--- Setting Unattended Access Password ---"
        & $ADExePath --set-password $env:ANYDESK_PASS
        Start-Sleep -Seconds 5
        
        # 6. استخراج مُعرِّف AnyDesk
        Write-Host "--- Attempting to retrieve AnyDesk ID ---"
        $ADID = $null
        $retries = 0
        while (-not $ADID -and $retries -lt 20) { 
            $ADID = (& $ADExePath --get-id)
            if ($ADID -match '\d{9}') {
                $ADID = ($ADID -match '\d{9}').Value
            } else {
                $ADID = $null
            }
            Start-Sleep -Seconds 5
            $retries++
        }
        
        if (-not $ADID) {
            Write-Error "Could not retrieve AnyDesk ID after multiple attempts. Exiting."
            exit 1
        }
        
        echo "ANYDESK_ID=$ADID" | Out-File -FilePath $env:GITHUB_ENV -Append
        
      shell: powershell

    # 7. تكوين RDP و إنشاء المستخدم
    - name: Configure RDP User and Set Password
      run: |
        $password = $env:RDP_PASS
        $securePass = ConvertTo-SecureString $password -AsPlainText -Force
        
        if (-not (Get-LocalUser -Name "$env:RDP_USER" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "$env:RDP_USER" -Password $securePass -AccountNeverExpires
        }
        
        Add-LocalGroupMember -Group "Administrators" -Member "$env:RDP_USER"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "$env:RDP_USER"
        
        Set-ItemProperty -Path 'HKLM:\System:CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Restart-Service -Name TermService -Force
      shell: powershell

    # 8. طباعة بيانات الاتصال
    - name: Display Connection Details
      run: |
        Write-Host "--------------------------------------------------------"
        Write-Host "          SHADOWHACKER-GOD: DUAL CONNECTION INFO         "
        Write-Host "--------------------------------------------------------"
        Write-Host "   A. اتصال RDP عبر Tailscale (الأساسي):"
        Write-Host "      - المستخدم (User): $env:RDP_USER"
        Write-Host "      - كلمة مرور RDP (Password): ${{ secrets.RDP_PASSWORD }}" 
        Write-Host "      - عنوان IP (IP/Address): $env:TAILSCALE_IP"
        Write-Host "--------------------------------------------------------"
        Write-Host "   B. اتصال AnyDesk (الاحتياطي/المباشر):"
        Write-Host "      - مُعرِّف AnyDesk (ID): $env:ANYDESK_ID"
        Write-Host "      - كلمة مرور AnyDesk (Password): ${{ secrets.ANYDESK_PASSWORD }}"
        Write-Host "--------------------------------------------------------"
      shell: powershell

    # 9. حلقة الحفظ والإغلاق (للحفظ الآمن قبل 5h 50m)
    - name: Keep Alive and Data Sync Loop (Safe Shutdown)
      run: |
        # الانتظار لمدة 5 ساعات و 50 دقيقة (21000 ثانية)
        Start-Sleep -Seconds 21000 
        
        Write-Host "--- Executing final data save to Gist (5h 50m mark) ---"
        # **خطوة الحفظ الآمن**
        python ./scripts/save_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
        
        Write-Host "Data saved successfully. Shutting down. Auto-restart imminent."
      shell: powershell
