# SHADOWHACKER-GOD: RDP Workflow (Final Fixed Code: Encoding Error Solved)

name: RDP-SECONDS 

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - uses: actions:checkout@v3

    # 1. إعداد المتغيرات السرية والبيئة
    - name: Setup Secrets and Environment Variables
      run: |
        echo "RDP_PASS=${{ secrets.RDP_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "RDP_USER=TOOLBOXLAP" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "ANYDESK_PASS=${{ secrets.ANYDESK_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "PERSISTENT_DIR=C:\Users\TOOLBOXLAP\PersistentData" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_ID=${{ secrets.GIST_ID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell

    # 2. تثبيت Python
    - name: Install Python Libraries for Gist Access
      run: pip install requests
      shell: cmd

    # 3. استعادة البيانات الدائمة
    - name: Restore Persistent Data from Gist
      run: |
        mkdir $env:PERSISTENT_DIR -Force
        python ./scripts/restore_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
      shell: pwsh

    # 4. تثبيت Tailscale
    - name: Install Tailscale (Stable MSI Method)
      run: |
        $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
        $installerPath = "$env:TEMP\tailscale.msi"
        Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
        Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
        Remove-Item $installerPath -Force
        Start-Sleep -Seconds 5
      shell: powershell

    # 5. توصيل Tailscale والحصول على IP
    - name: Establish Tailscale Connection & Get IP
      run: |
        $TailscaleExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
        & $TailscaleExe up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=AEON-RDP-WIN-$env:GITHUB_RUN_ID
        $tsIP = $null
        $retries = 0
        while (-not $tsIP -and $retries -lt 15) {
            $tsIP = & $TailscaleExe ip -4
            Start-Sleep -Seconds 5
            $retries++
        }
        if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
        }
        echo "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell

    # 6. تثبيت وتكوين AnyDesk
    - name: Install and Configure AnyDesk (robust, non-blocking)
      run: |
        # دالة مساعدة: تنزيل الملف
        function Invoke-Download {
            param($url, $outPath)
            try {
                Write-Host "Downloading: $url -> $outPath"
                Invoke-WebRequest -Uri $url -OutFile $outPath -UseBasicParsing -ErrorAction Stop
                return $true
            } catch {
                Write-Warning "Download failed: $($_.Exception.Message)"
                return $false
            }
        }
        
        # دالة مساعدة: تتبع موقع AnyDesk.exe 
        function Find-AnyDeskExe {
            $ADExePath = $null
            $possibleRoots = @(
                "$env:ProgramFiles\AnyDesk", 
                "${env:ProgramFiles(x86)}\AnyDesk", 
                $env:ProgramFiles, 
                ${env:ProgramFiles(x86)}
            )
            
            foreach ($root in $possibleRoots | Where-Object { $_ -ne $null -and (Test-Path $_) }) {
                try {
                    $candidate = Join-Path $root "AnyDesk.exe"
                    if (Test-Path $candidate) { 
                        Write-Host "Found AnyDesk (Direct Path): $candidate"
                        return $candidate 
                    }
                    $found = Get-ChildItem -Path $root -Filter "AnyDesk.exe" -Recurse -Depth 2 -ErrorAction SilentlyContinue | Select-Object -First 1
                    if ($found) { 
                        Write-Host "Found AnyDesk (Deep Search): $($found.FullName)"
                        return $found.FullName 
                    }
                } catch {}
            }
            return $null
        }

        $tempDir = "$env:TEMP\AnyDesk"
        New-Item -Path $tempDir -ItemType Directory -Force | Out-Null
        $msiUrl = "https://download.anydesk.com/AnyDesk.msi"
        $msiPath = Join-Path $tempDir "AnyDesk.msi"
        $installed = $false

        # 1) Try MSI download & silent install with timeout
        if (Invoke-Download -url $msiUrl -outPath $msiPath) {
            Write-Host "Installing AnyDesk MSI via msiexec (silent, 180s timeout)..."
            $msiProcess = Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "`"$msiPath`"", "/qn", "/norestart" -PassThru
            $timeoutSeconds = 180
            $sw = [diagnostics.stopwatch]::StartNew()
            while (-not $msiProcess.HasExited -and $sw.Elapsed.TotalSeconds -lt $timeoutSeconds) { Start-Sleep -Seconds 2 }
            if (-not $msiProcess.HasExited) {
                try { $msiProcess.Kill() } catch {}
                Write-Warning "msiexec killed due to timeout."
            } else {
                if ($msiProcess.ExitCode -eq 0) { 
                    $installed = $true
                    Write-Host "MSI installed successfully." 
                } else { 
                    Write-Warning "msiexec returned non-zero exit code ($($msiProcess.ExitCode))." 
                }
            }
        } else {
            Write-Warning "MSI download failed; will try winget/choco as fallback."
        }

        # 2) winget fallback
        if (-not $installed) {
            try {
                $winget = Get-Command winget -ErrorAction SilentlyContinue
                if ($winget) {
                    Write-Host "Attempting winget install (180s timeout)..."
                    $p = Start-Process -FilePath "winget" -ArgumentList "install --silent --accept-package-agreements --accept-source-agreements AnyDesk.AnyDesk" -PassThru -NoNewWindow
                    $p.WaitForExit(180000)
                    if (-not $p.HasExited) { $p.Kill(); throw "winget timed out" }
                    if ($p.ExitCode -eq 0) { 
                         $installed = $true
                         Write-Host "winget installed successfully." 
                    } else { 
                        Write-Warning "winget exited with code $($p.ExitCode)." 
                    }
                }
            } catch { Write-Warning "winget install failed: $($_.Exception.Message)" }
        }

        # 3) choco fallback
        if (-not $installed) {
            try {
                $choco = Get-Command choco -ErrorAction SilentlyContinue
                if ($choco) {
                    Write-Host "Attempting choco install (240s timeout)..."
                    $p = Start-Process -FilePath "choco" -ArgumentList "install anydesk -y --no-progress" -PassThru -NoNewWindow
                    $p.WaitForExit(240000)
                    if (-not $p.HasExited) { $p.Kill(); throw "choco timed out" }
                    if ($p.ExitCode -eq 0) { 
                        $installed = $true
                        Write-Host "choco installed successfully."
                    } else {
                        Write-Warning "choco exited with code $($p.ExitCode)."
                    }
                }
            } catch { Write-Warning "choco install failed: $($_.Exception.Message)" }
        }

        # 4) Locate AnyDesk.exe and finalize
        $ADExePath = Find-AnyDeskExe
        
        if (-not $ADExePath) {
            Write-Warning "AnyDesk installation failed or executable not found. AnyDesk will be unavailable. Proceeding with Tailscale/RDP."
            echo "ANYDESK_ID=NOT_AVAILABLE" | Out-File -FilePath $env:GITHUB_ENV -Append
            exit 0
        }

        # 5) Try to set unattended access password via CLI (best-effort)
        try {
            Write-Host "Attempting to set AnyDesk password via CLI..."
            & "$ADExePath" --set-password $env:ANYDESK_PASS 2>&1 | Out-Null
            Start-Sleep -Seconds 3
        } catch {
            Write-Warning "Setting AnyDesk password via CLI failed: $($_.Exception.Message)"
        }

        # 6) Get AnyDesk ID with retries (best-effort)
        $ADID = $null
        $retries = 0
        Write-Host "Attempting to retrieve AnyDesk ID (Max 60s Wait)..."
        while (-not $ADID -and $retries -lt 12) {
            try {
                $raw = (& "$ADExePath" --get-id 2>$null | Out-String).Trim()
                if ($raw -match '\d{6,12}') { $ADID = $Matches[0] } else { $ADID = $raw.Trim() }
            } catch {}
            if (-not $ADID) { Start-Sleep -Seconds 5 }
            $retries++
        }

        if ($ADID -and $ADID -ne 'True' -and $ADID -ne 'False') {
            Write-Host "SUCCESS: AnyDesk ID: $ADID"
            echo "ANYDESK_ID=$ADID" | Out-File -FilePath $env:GITHUB_ENV -Append
        } else {
            Write-Warning "Could not retrieve valid AnyDesk ID. Continuing."
            echo "ANYDESK_ID=NOT_AVAILABLE" | Out-File -FilePath $env:GITHUB_ENV -Append
        }
        
      shell: powershell

    # 7. تكوين RDP و إنشاء المستخدم
    - name: Configure RDP User and Set Password
      run: |
        $password = $env:RDP_PASS
        $securePass = ConvertTo-SecureString $password -AsPlainText -Force

        if (-not (Get-LocalUser -Name "$env:RDP_USER" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "$env:RDP_USER" -Password $securePass -AccountNeverExpires
        }

        Add-LocalGroupMember -Group "Administrators" -Member "$env:RDP_USER"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "$env:RDP_USER"

        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Restart-Service -Name TermService -Force
      shell: powershell

    # 8. طباعة بيانات الاتصال (تم حل مشكلة الترميز)
    - name: Display Connection Details
      run: |
        $ADID = $env:ANYDESK_ID
        if (-not $ADID) { $ADID = "NOT_AVAILABLE" }

        # تم تبسيط النص وتغيير Write-Host إلى Write-Output لتجنب أخطاء الترميز النحوية
        Write-Output "--------------------------------------------------------"
        Write-Output "          SHADOWHACKER-GOD: DUAL CONNECTION INFO         "
        Write-Output "--------------------------------------------------------"
        Write-Output "   A. RDP Connection via Tailscale (Primary):"
        Write-Output "      - User: $env:RDP_USER"
        Write-Output "      - RDP Password: ${{ secrets.RDP_PASSWORD }}"
        Write-Output "      - IP/Address: $env:TAILSCALE_IP"
        Write-Output "--------------------------------------------------------"
        Write-Output "   B. AnyDesk Connection (Fallback):"
        Write-Output "      - AnyDesk ID: $ADID"
        Write-Output "      - AnyDesk Password: ${{ secrets.ANYDESK_PASSWORD }}"
        Write-Output "      **Note: If ID is 'NOT_AVAILABLE', use Tailscale only.**"
        Write-Output "--------------------------------------------------------"
      shell: powershell

    # 9. حلقة الحفظ والإغلاق
    - name: Keep Alive and Data Sync Loop (Safe Shutdown)
      run: |
        Start-Sleep -Seconds 21000
        Write-Host "--- Executing final data save to Gist (5h 50m mark) ---"
        python ./scripts/save_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
        Write-Host "Data saved successfully. Shutting down. Auto-restart imminent."
      shell: powershell
