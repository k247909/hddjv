# SHADOWHACKER-GOD: RDP Workflow (Final Code: Robust Install + Permission Profile)

name: RDP-TAILSCALE

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - uses: actions/checkout@v3
    
    # 1. إعداد المتغيرات السرية والبيئة
    - name: Setup Secrets and Environment Variables
      run: |
        echo "RDP_PASS=${{ secrets.RDP_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "RDP_USER=TOOLBOXLAP" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "ANYDESK_PASS=${{ secrets.ANYDESK_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "PERSISTENT_DIR=C:\Users\TOOLBOXLAP\PersistentData" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_ID=${{ secrets.GIST_ID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell

    # 2. تثبيت Python
    - name: Install Python Libraries for Gist Access
      run: pip install requests
      shell: cmd

    # 3. استعادة البيانات الدائمة
    - name: Restore Persistent Data from Gist
      run: |
        mkdir $env:PERSISTENT_DIR -Force
        python ./scripts/restore_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
      shell: pwsh

    # 4. تثبيت Tailscale
    - name: Install Tailscale (Stable MSI Method)
      run: |
        $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
        $installerPath = "$env:TEMP\tailscale.msi"
        Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
        Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
        Remove-Item $installerPath -Force
        Start-Sleep -Seconds 5
      shell: powershell

    # 5. توصيل Tailscale والحصول على IP
    - name: Establish Tailscale Connection & Get IP
      run: |
        $TailscaleExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
        & $TailscaleExe up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=AEON-RDP-WIN-$env:GITHUB_RUN_ID
        $tsIP = $null
        $retries = 0
        while (-not $tsIP -and $retries -lt 15) {
            $tsIP = & $TailscaleExe ip -4
            Start-Sleep -Seconds 5
            $retries++
        }
        if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
        }
        echo "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell

    # 6. AnyDesk - Robust Install + Force Unattended Access via Permission Profile
    - name: AnyDesk - Robust Install + Force Unattended Access via Permission Profile
      run: |
        Write-Host "=== AnyDesk: Installation and Unattended Access Configuration ==="
        $installed = $false
        
        # Helper function: Download file
        function Invoke-Download {
            param($url, $outPath)
            try {
                Write-Host "Downloading: $url -> $outPath"
                Invoke-WebRequest -Uri $url -OutFile $outPath -UseBasicParsing -ErrorAction Stop
                return $true
            } catch {
                Write-Warning "Download failed: $($_.Exception.Message)"
                return $false
            }
        }
        
        # --- 1) Installation attempts (MSI, Winget, Choco) ---
        $tempDir = "$env:TEMP\AnyDesk"
        New-Item -Path $tempDir -ItemType Directory -Force | Out-Null
        $msiUrl = "https://download.anydesk.com/AnyDesk.msi"
        $msiPath = Join-Path $tempDir "AnyDesk.msi"
        
        # MSI Attempt
        if (Invoke-Download -url $msiUrl -outPath $msiPath) {
            Write-Host "Installing AnyDesk MSI via msiexec..."
            $msiProcess = Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "`"$msiPath`"", "/qn", "/norestart" -PassThru
            $msiProcess.WaitForExit(180000)
            if ($msiProcess.ExitCode -eq 0) { $installed = $true; Write-Host "MSI installed successfully." }
        }
        
        # Winget Fallback
        if (-not $installed -and (Get-Command winget -ErrorAction SilentlyContinue)) {
            Write-Host "Attempting winget install..."
            $p = Start-Process -FilePath "winget" -ArgumentList "install --silent --accept-package-agreements --accept-source-agreements AnyDesk.AnyDesk" -PassThru -NoNewWindow
            $p.WaitForExit(180000)
            if ($p.ExitCode -eq 0) { $installed = $true; Write-Host "winget installed successfully." }
        }
        
        # Choco Fallback
        if (-not $installed -and (Get-Command choco -ErrorAction SilentlyContinue)) {
            Write-Host "Attempting choco install..."
            $p = Start-Process -FilePath "choco" -ArgumentList "install anydesk -y --no-progress" -PassThru -NoNewWindow
            $p.WaitForExit(240000)
            if ($p.ExitCode -eq 0) { $installed = $true; Write-Host "choco installed successfully." }
        }

        if (-not $installed) {
            Write-Error "AnyDesk installation failed via all methods (MSI, Winget, Choco). Aborting AnyDesk setup."
            echo "ANYDESK_ID=NOT_AVAILABLE" | Out-File -FilePath $env:GITHUB_ENV -Append
            exit 0
        }
        
        # --- 2) Locate AnyDesk.exe and Configuration ---

        # Find AnyDesk executable (robust search)
        $possible = @(
          "C:\ProgramData\chocolatey\bin\AnyDesk.exe",
          "C:\ProgramData\chocolatey\lib\anydesk.portable\tools\AnyDesk.exe",
          "C:\ProgramData\chocolatey\lib\anydesk\tools\AnyDesk.exe",
          "$env:ProgramFiles\AnyDesk\AnyDesk.exe",
          "$env:ProgramFiles(x86)\AnyDesk\AnyDesk.exe",
          "$env:LocalAppData\Programs\AnyDesk\AnyDesk.exe"
        )
        $ADExe = $possible | Where-Object { Test-Path $_ } | Select-Object -First 1

        if (-not $ADExe) {
            Write-Error "AnyDesk executable not found after successful installation. Aborting."
            echo "ANYDESK_ID=NOT_AVAILABLE" | Out-File -FilePath $env:GITHUB_ENV -Append
            exit 1
        }
        Write-Host "Using AnyDesk binary: $ADExe"

        # 3) Ensure AnyDesk service is running (System-level)
        if (-not (Get-Service -Name "AnyDesk" -ErrorAction SilentlyContinue)) {
            Write-Host "Installing AnyDesk service..."
            Start-Process -FilePath $ADExe -ArgumentList "--install-service" -Wait
            Start-Sleep -Seconds 4
        }
        Start-Service -Name "AnyDesk" -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 3

        # 4) Create Permission Profile via CLI with password (using stdin pipe)
        $profileName = "unattended_auto_profile"
        $pw = $env:ANYDESK_PASS
        
        Write-Host "Creating permission profile '$profileName' and setting password (via CLI)..."
        # Standard permission list for full unattended access
        $perms = "+audio +input +clipboard +clipboard_files +file_manager +restart +lock_desk +sysinfo +whiteboard +tcp_tunnel +vpn +user_pointer +privacy_feature +record_session"
        # PowerShell piping string to exe stdin:
        $pw | & $ADExe --add-profile $profileName $perms 2>&1 | Tee-Object -Variable addprof_out
        Write-Host "add-profile output (last lines):"
        $addprof_out | Select-Object -Last 20 | ForEach-Object { Write-Host $_ }

        # 5) Configure HKLM keys to activate the Permission Profile for the System service
        $reg = "HKLM:\SOFTWARE\AnyDesk\ad.security.permission_profiles"
        if (-not (Test-Path $reg)) { New-Item -Path $reg -Force | Out-Null }

        Write-Host "Writing registry keys to enable permission profile and unattended access..."
        Set-ItemProperty -Path $reg -Name "define.profile1" -Value $profileName -Force
        Set-ItemProperty -Path $reg -Name "enable_previous_session" -Value 1 -Force
        
        $rootReg = "HKLM:\SOFTWARE\AnyDesk"
        if (-not (Test-Path $rootReg)) { New-Item -Path $rootReg -Force | Out-Null }
        Set-ItemProperty -Path $rootReg -Name "enable_uaccess_permissions" -Value "true" -Force

        # 6) Restart service to apply all settings
        Restart-Service -Name "AnyDesk" -Force
        Start-Sleep -Seconds 4

        # 7) Retrieve AnyDesk ID 
        $ADID = $null
        $retries = 0
        Write-Host "Attempting to retrieve AnyDesk ID (Max 60s Wait)..."
        while (-not $ADID -and $retries -lt 12) {
            try {
                $raw = (& "$ADExe" --get-id 2>$null | Out-String).Trim()
                if ($raw -match '\d{6,12}') { $ADID = $Matches[0] } else { $ADID = $raw.Trim() }
            } catch {}
            if (-not $ADID) { Start-Sleep -Seconds 5 }
            $retries++
        }

        if ($ADID -and $ADID -ne 'True' -and $ADID -ne 'False') {
            Write-Host "SUCCESS: AnyDesk ID: $ADID"
            echo "ANYDESK_ID=$ADID" | Out-File -FilePath $env:GITHUB_ENV -Append
        } else {
            Write-Warning "Could not retrieve valid AnyDesk ID. Continuing."
            echo "ANYDESK_ID=NOT_AVAILABLE" | Out-File -FilePath $env:GITHUB_ENV -Append
        }
        
        # 8) Debug info
        Write-Host "=== Debug: AnyDesk service status ==="
        Get-Service -Name "AnyDesk" | Format-List | ForEach-Object { Write-Host $_ }
        Write-Host "=== Debug: permission_profiles registry keys (sample) ==="
        Get-ItemProperty -Path $reg -ErrorAction SilentlyContinue | Format-List | ForEach-Object { Write-Host $_ }
        Write-Host "=== Done: attempt to enable unattended access finished ==="
      shell: powershell


    # 6.5. فتح منفذ AnyDesk في جدار الحماية
    - name: Open AnyDesk Firewall Port (TCP 6568)
      run: |
        Write-Host "Opening AnyDesk Firewall Port (TCP 6568)..."
        try {
            Get-NetFirewallRule -DisplayName "AnyDesk_TCP_6568_Inbound" -ErrorAction SilentlyContinue | Remove-NetFirewallRule -Confirm:$false -ErrorAction SilentlyContinue
            New-NetFirewallRule -DisplayName "AnyDesk_TCP_6568_Inbound" -Direction Inbound -Protocol TCP -LocalPort 6568 -Action Allow -Profile Any
            Write-Host "Successfully opened TCP 6568."
        } catch {
            Write-Warning "Failed to open AnyDesk firewall port."
        }
      shell: powershell


    # 7. تكوين RDP و إنشاء المستخدم
    - name: Configure RDP User and Set Password
      run: |
        $password = $env:RDP_PASS
        $securePass = ConvertTo-SecureString $password -AsPlainText -Force

        if (-not (Get-LocalUser -Name "$env:RDP_USER" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "$env:RDP_USER" -Password $securePass -AccountNeverExpires
        }

        Add-LocalGroupMember -Group "Administrators" -Member "$env:RDP_USER"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "$env:RDP_USER"

        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Restart-Service -Name TermService -Force
      shell: powershell

    # 8. طباعة بيانات الاتصال
    - name: Display Connection Details
      run: |
        $ADID = $env:ANYDESK_ID
        if (-not $ADID) { $ADID = "NOT_AVAILABLE" }

        Write-Output "--------------------------------------------------------"
        Write-Output "          SHADOWHACKER-GOD: DUAL CONNECTION INFO         "
        Write-Output "--------------------------------------------------------"
        Write-Output "   A. RDP Connection via Tailscale (Primary):"
        Write-Output "      - User: $env:RDP_USER"
        Write-Output "      - RDP Password: ${{ secrets.RDP_PASSWORD }}"
        Write-Output "      - IP/Address: $env:TAILSCALE_IP"
        Write-Output "--------------------------------------------------------"
        Write-Output "   B. AnyDesk Connection (Fallback):"
        Write-Output "      - AnyDesk ID: $ADID"
        Write-Output "      - AnyDesk Password: ${{ secrets.ANYDESK_PASSWORD }}"
        Write-Output "      **Note: If ID is 'NOT_AVAILABLE', use Tailscale only.**"
        Write-Output "--------------------------------------------------------"
      shell: powershell

    # 9. حلقة الحفظ والإغلاق
    - name: Keep Alive and Data Sync Loop (Safe Shutdown)
      run: |
        Start-Sleep -Seconds 21000
        Write-Host "--- Executing final data save to Gist (5h 50m mark) ---"
        python ./scripts/save_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
        Write-Host "Data saved successfully. Shutting down. Auto-restart imminent."
      shell: powershell
