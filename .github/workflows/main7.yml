# SHADOWHACKER-GOD: RDP Workflow (Final Code: Fixed Path & CLI Unattended Enforcement)

name: RDP-ANYDESK

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    # (الخطوات 1-5 لم تتغير وتم حذفها للاختصار، لكنها تعمل)
    - uses: actions/checkout@v3

    # 1. إعداد المتغيرات السرية والبيئة
    - name: Setup Secrets and Environment Variables
      run: |
        echo "RDP_PASS=${{ secrets.RDP_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "RDP_USER=TOOLBOXLAP" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "ANYDESK_PASS=${{ secrets.ANYDESK_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "PERSISTENT_DIR=C:\Users\TOOLBOXLAP\PersistentData" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_ID=${{ secrets.GIST_ID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell

    # 2. تثبيت Python
    - name: Install Python Libraries for Gist Access
      run: pip install requests
      shell: cmd

    # 3. استعادة البيانات الدائمة (يرجى التأكد من صحة GIST_TOKEN لتفادي خطأ 401)
    - name: Restore Persistent Data from Gist
      run: |
        mkdir $env:PERSISTENT_DIR -Force
        python ./scripts/restore_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
      shell: pwsh

    # 4. تثبيت Tailscale
    - name: Install Tailscale (Stable MSI Method)
      run: |
        $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
        $installerPath = "$env:TEMP\tailscale.msi"
        Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
        Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
        Remove-Item $installerPath -Force
        Start-Sleep -Seconds 5
      shell: powershell

    # 5. توصيل Tailscale والحصول على IP
    - name: Establish Tailscale Connection & Get IP
      run: |
        $TailscaleExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
        & $TailscaleExe up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=AEON-RDP-WIN-$env:GITHUB_RUN_ID
        $tsIP = $null
        $retries = 0
        while (-not $tsIP -and $retries -lt 15) {
            $tsIP = & $TailscaleExe ip -4
            Start-Sleep -Seconds 5
            $retries++
        }
        if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
        }
        echo "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell
      
    # 6. تثبيت وتكوين AnyDesk (تطبيق قسري للوصول غير المراقب - التركيز على CLI)
    - name: Install and Configure AnyDesk (Enforce Unattended Access)
      run: |
        # --- 1) Install AnyDesk via MSI to a fixed path ---
        $msiUrl = "https://download.anydesk.com/AnyDesk.msi"
        $msiPath = "$env:TEMP\AnyDesk.msi"
        $ADExePath = "${env:ProgramFiles(x86)}\AnyDesk\AnyDesk.exe"
        
        Write-Host "Downloading AnyDesk MSI..."
        try {
            Invoke-WebRequest -Uri $msiUrl -OutFile $msiPath -UseBasicParsing -ErrorAction Stop
        } catch {
            Write-Error "Failed to download MSI: $($_.Exception.Message)"
            exit 1
        }

        Write-Host "Installing AnyDesk MSI to create the service and fixed path..."
        Start-Process msiexec.exe -ArgumentList "/i", "`"$msiPath`"", "/qn", "/norestart" -Wait
        Start-Sleep -Seconds 10
        
        if (-not (Test-Path $ADExePath)) {
            $ADExePath = "$env:ProgramFiles\AnyDesk\AnyDesk.exe" # Try 64-bit path as well
            if (-not (Test-Path $ADExePath)) {
                Write-Error "AnyDesk.exe not found after installation. Exiting."
                echo "ANYDESK_ID=NOT_AVAILABLE" | Out-File -FilePath $env:GITHUB_ENV -Append
                exit 0
            }
        }
        
        # --- 2) Ensure Service is Running and Set Password/Unattended via CLI ---
        Write-Host "Ensuring AnyDesk Service is running..."
        Start-Service -Name "AnyDesk" -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 5
        
        Write-Host "Setting Unattended Password and enabling access (attempt 1/2)..."
        # This command is the most reliable way for AnyDesk to set the correct password hash in HKLM
        & "$ADExePath" --set-password $env:ANYDESK_PASS 2>&1 | Out-Null
        Start-Sleep -Seconds 5 
        
        Write-Host "Setting Unattended Password and enabling access (attempt 2/2 - RESTART)..."
        # Restarting the service and trying again often ensures success
        Restart-Service -Name "AnyDesk" -Force -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 5
        & "$ADExePath" --set-password $env:ANYDESK_PASS 2>&1 | Out-Null
        Start-Service -Name "AnyDesk" -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 5

        # --- 3) Force Unattended Access and Policy via HKLM Registry (for safety) ---
        try {
            $regPath = "HKLM:\SOFTWARE\AnyDesk"
            if (!(Test-Path $regPath)) { New-Item -Path $regPath | Out-Null }
            
            Write-Host "Enforcing Unattended policy in HKLM Registry..."
            # ad.security.allow_always = 1 ensures no manual acceptance is needed
            Set-ItemProperty -Path $regPath -Name "ad.security.allow_always" -Type DWord -Value 1 -ErrorAction SilentlyContinue
            # ad.security.unattended = 1 is the explicit unattended flag
            Set-ItemProperty -Path $regPath -Name "ad.security.unattended" -Type DWord -Value 1 -ErrorAction SilentlyContinue

            Write-Host "Unattended Access Registry keys set (relying on CLI for password hash)."
        } catch {
            Write-Warning "Failed to set Unattended Access HKLM Registry settings."
        }
        
        # --- 4) Retrieve AnyDesk ID ---
        $ADID = $null
        $retries = 0
        Write-Host "Attempting to retrieve AnyDesk ID (Max 60s Wait)..."
        while (-not $ADID -and $retries -lt 12) {
            try {
                $raw = (& "$ADExePath" --get-id 2>$null | Out-String).Trim()
                if ($raw -match '\d{6,12}') { $ADID = $Matches[0] } else { $ADID = $raw.Trim() }
            } catch {}
            if (-not $ADID) { Start-Sleep -Seconds 5 }
            $retries++
        }

        if ($ADID -and $ADID -ne 'True' -and $ADID -ne 'False') {
            Write-Host "SUCCESS: AnyDesk ID: $ADID"
            echo "ANYDESK_ID=$ADID" | Out-File -FilePath $env:GITHUB_ENV -Append
        } else {
            Write-Warning "Could not retrieve valid AnyDesk ID. Continuing."
            echo "ANYDESK_ID=NOT_AVAILABLE" | Out-File -FilePath $env:GITHUB_ENV -Append
        }
        
      shell: powershell

    # 6.5. فتح منفذ AnyDesk في جدار الحماية
    - name: Open AnyDesk Firewall Port (TCP 6568)
      run: |
        Write-Host "Opening AnyDesk Firewall Port (TCP 6568)..."
        try {
            Get-NetFirewallRule -DisplayName "AnyDesk_TCP_6568_Inbound" -ErrorAction SilentlyContinue | Remove-NetFirewallRule -Confirm:$false -ErrorAction SilentlyContinue
            New-NetFirewallRule -DisplayName "AnyDesk_TCP_6568_Inbound" -Direction Inbound -Protocol TCP -LocalPort 6568 -Action Allow -Profile Any
            Write-Host "Successfully opened TCP 6568."
        } catch {
            Write-Warning "Failed to open AnyDesk firewall port."
        }
      shell: powershell


    # 7. تكوين RDP و إنشاء المستخدم
    - name: Configure RDP User and Set Password
      run: |
        $password = $env:RDP_PASS
        $securePass = ConvertTo-SecureString $password -AsPlainText -Force

        if (-not (Get-LocalUser -Name "$env:RDP_USER" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "$env:RDP_USER" -Password $securePass -AccountNeverExpires
        }

        Add-LocalGroupMember -Group "Administrators" -Member "$env:RDP_USER"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "$env:RDP_USER"

        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Restart-Service -Name TermService -Force
      shell: powershell

    # 8. طباعة بيانات الاتصال
    - name: Display Connection Details
      run: |
        $ADID = $env:ANYDESK_ID
        if (-not $ADID) { $ADID = "NOT_AVAILABLE" }

        Write-Output "--------------------------------------------------------"
        Write-Output "          SHADOWHACKER-GOD: DUAL CONNECTION INFO         "
        Write-Output "--------------------------------------------------------"
        Write-Output "   A. RDP Connection via Tailscale (Primary):"
        Write-Output "      - User: $env:RDP_USER"
        Write-Output "      - RDP Password: ${{ secrets.RDP_PASSWORD }}"
        Write-Output "      - IP/Address: $env:TAILSCALE_IP"
        Write-Output "--------------------------------------------------------"
        Write-Output "   B. AnyDesk Connection (Fallback):"
        Write-Output "      - AnyDesk ID: $ADID"
        Write-Output "      - AnyDesk Password: ${{ secrets.ANYDESK_PASSWORD }}"
        Write-Output "      **Note: If ID is 'NOT_AVAILABLE', use Tailscale only.**"
        Write-Output "--------------------------------------------------------"
      shell: powershell

    # 9. حلقة الحفظ والإغلاق
    - name: Keep Alive and Data Sync Loop (Safe Shutdown)
      run: |
        Start-Sleep -Seconds 21000
        Write-Host "--- Executing final data save to Gist (5h 50m mark) ---"
        python ./scripts/save_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
        Write-Host "Data saved successfully. Shutting down. Auto-restart imminent."
      shell: powershell
