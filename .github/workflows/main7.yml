# SHADOWHACKER-GOD: RDP Workflow (Final Code: Fixed Install Logic + Permission Profile)

name: TAILSCALE

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - uses: actions/checkout@v3
    
    # 1. إعداد المتغيرات السرية والبيئة
    - name: Setup Secrets and Environment Variables
      run: |
        echo "RDP_PASS=${{ secrets.RDP_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "RDP_USER=TOOLBOXLAP" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "ANYDESK_PASS=${{ secrets.ANYDESK_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "PERSISTENT_DIR=C:\Users\TOOLBOXLAP\PersistentData" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_ID=${{ secrets.GIST_ID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell

    # 2. تثبيت Python
    - name: Install Python Libraries for Gist Access
      run: pip install requests
      shell: cmd

    # 3. استعادة البيانات الدائمة
    - name: Restore Persistent Data from Gist
      run: |
        mkdir $env:PERSISTENT_DIR -Force
        python ./scripts/restore_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
      shell: pwsh

    # 4. تثبيت Tailscale
    - name: Install Tailscale (Stable MSI Method)
      run: |
        $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
        $installerPath = "$env:TEMP\tailscale.msi"
        Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
        Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
        Remove-Item $installerPath -Force
        Start-Sleep -Seconds 5
      shell: powershell

    # 5. توصيل Tailscale والحصول على IP
    - name: Establish Tailscale Connection & Get IP
      run: |
        $TailscaleExe = "$env:ProgramFiles\Tailscale\tailscale.exe"
        & $TailscaleExe up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=AEON-RDP-WIN-$env:GITHUB_RUN_ID
        $tsIP = $null
        $retries = 0
        while (-not $tsIP -and $retries -lt 15) {
            $tsIP = & $TailscaleExe ip -4
            Start-Sleep -Seconds 5
            $retries++
        }
        if (-not $tsIP) {
            Write-Error "Tailscale IP not assigned. Exiting."
            exit 1
        }
        echo "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell

    # 6. AnyDesk - Robust Install (Winget Focus) + Force Unattended Access
    - name: AnyDesk - Robust Install (Winget Focus) + Force Unattended Access
      run: |
        Write-Host "=== AnyDesk: Installation and Unattended Access Configuration ==="
        
        # --- 1) Installation attempts (Winget is most reliable on GitHub Runners) ---
        Write-Host "Attempting winget install (AnyDesk)..."
        if (Get-Command winget -ErrorAction SilentlyContinue) {
            # Try to ensure the service version is installed using the MSI link if possible
            $p = Start-Process -FilePath "winget" -ArgumentList "install --id AnyDesk.AnyDesk --silent --accept-package-agreements --accept-source-agreements" -PassThru -NoNewWindow
            $p.WaitForExit(180000)
            if ($p.ExitCode -eq 0) { 
                Write-Host "Winget install completed successfully." 
            } else {
                Write-Warning "Winget install failed. Trying Choco/MSI path search."
            }
        }
        
        # --- 2) Locate AnyDesk.exe and Configuration ---
        
        $ADExe = $null
        $possible = @(
          "$env:ProgramFiles\AnyDesk\AnyDesk.exe",
          "$env:ProgramFiles(x86)\AnyDesk\AnyDesk.exe",
          "C:\ProgramData\chocolatey\bin\AnyDesk.exe",
          "C:\ProgramData\chocolatey\lib\anydesk.portable\tools\AnyDesk.exe"
        )
        $ADExe = $possible | Where-Object { Test-Path $_ } | Select-Object -First 1

        if (-not $ADExe) {
            Write-Error "AnyDesk executable not found after install attempts. Aborting."
            echo "ANYDESK_ID=NOT_AVAILABLE" | Out-File -FilePath $env:GITHUB_ENV -Append
            exit 1
        }
        Write-Host "Using AnyDesk binary: $ADExe"

        # --- 3) Configuration (Permission Profile Logic) ---
        
        # 3.1) Ensure AnyDesk service is running (System-level)
        if (-not (Get-Service -Name "AnyDesk" -ErrorAction SilentlyContinue)) {
            Write-Host "Installing AnyDesk service..."
            Start-Process -FilePath $ADExe -ArgumentList "--install-service" -Wait -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 4
        }
        Start-Service -Name "AnyDesk" -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 3

        # 3.2) Create Permission Profile via CLI with password
        $profileName = "unattended_auto_profile"
        $pw = $env:ANYDESK_PASS
        
        Write-Host "Creating permission profile '$profileName' and setting password (via CLI)..."
        $perms = "+audio +input +clipboard +clipboard_files +file_manager +restart +lock_desk +sysinfo +whiteboard +tcp_tunnel +vpn +user_pointer +privacy_feature +record_session"
        # Pipe password to CLI to ensure correct hash generation
        $pw | & $ADExe --add-profile $profileName $perms 2>&1 | Tee-Object -Variable addprof_out
        Write-Host "add-profile output (last lines):"
        $addprof_out | Select-Object -Last 20 | ForEach-Object { Write-Host $_ }

        # 3.3) Configure HKLM keys to activate the Permission Profile
        $reg = "HKLM:\SOFTWARE\AnyDesk\ad.security.permission_profiles"
        if (-not (Test-Path $reg)) { New-Item -Path $reg -Force | Out-Null }

        Write-Host "Writing registry keys to enable permission profile and unattended access..."
        Set-ItemProperty -Path $reg -Name "define.profile1" -Value $profileName -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $reg -Name "enable_previous_session" -Value 1 -Force -ErrorAction SilentlyContinue
        
        $rootReg = "HKLM:\SOFTWARE\AnyDesk"
        if (-not (Test-Path $rootReg)) { New-Item -Path $rootReg -Force | Out-Null }
        Set-ItemProperty -Path $rootReg -Name "enable_uaccess_permissions" -Value "true" -Force -ErrorAction SilentlyContinue

        # 3.4) Restart service to apply all settings
        Restart-Service -Name "AnyDesk" -Force -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 4

        # 3.5) Retrieve AnyDesk ID 
        $ADID = $null
        $retries = 0
        Write-Host "Attempting to retrieve AnyDesk ID (Max 60s Wait)..."
        while (-not $ADID -and $retries -lt 12) {
            try {
                $raw = (& "$ADExe" --get-id 2>$null | Out-String).Trim()
                if ($raw -match '\d{6,12}') { $ADID = $Matches[0] } else { $ADID = $raw.Trim() }
            } catch {}
            if (-not $ADID) { Start-Sleep -Seconds 5 }
            $retries++
        }

        if ($ADID -and $ADID -ne 'True' -and $ADID -ne 'False') {
            Write-Host "SUCCESS: AnyDesk ID: $ADID"
            echo "ANYDESK_ID=$ADID" | Out-File -FilePath $env:GITHUB_ENV -Append
        } else {
            Write-Warning "Could not retrieve valid AnyDesk ID. Continuing."
            echo "ANYDESK_ID=NOT_AVAILABLE" | Out-File -FilePath $env:GITHUB_ENV -Append
        }
        
        # 3.6) Debug info
        Write-Host "=== Debug: AnyDesk service status ==="
        Get-Service -Name "AnyDesk" | Format-List | ForEach-Object { Write-Host $_ }
        Write-Host "=== Debug: permission_profiles registry keys (sample) ==="
        Get-ItemProperty -Path $reg -ErrorAction SilentlyContinue | Format-List | ForEach-Object { Write-Host $_ }
        Write-Host "=== Done: attempt to enable unattended access finished ==="
      shell: powershell


    # (Steps 6.5, 7, 8, 9 unchanged and excluded for brevity)
