# SHADOWHACKER-GOD: RDP Workflow (Final Code: Fixed Install Logic + Permission Profile)

name: AEON-RDP-TAILSCALE-ANYDESK

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - uses: actions:checkout@v3
    
    # (Steps 1-5 unchanged and excluded for brevity)
    # ... Setup Secrets, Install Python, Restore Data, Install Tailscale, Connect Tailscale ...

    # 6. AnyDesk - Robust Install (Winget Focus) + Force Unattended Access
    - name: AnyDesk - Robust Install (Winget Focus) + Force Unattended Access
      run: |
        Write-Host "=== AnyDesk: Installation and Unattended Access Configuration ==="
        
        # --- 1) Installation attempts (Winget is most reliable on GitHub Runners) ---
        $ADExePathDefault = "$env:ProgramFiles(x86)\AnyDesk\AnyDesk.exe"
        
        # 1.1) Try Winget (Most reliable)
        Write-Host "Attempting winget install (AnyDesk)..."
        if (Get-Command winget -ErrorAction SilentlyContinue) {
            $p = Start-Process -FilePath "winget" -ArgumentList "install --id AnyDesk.AnyDesk --silent --accept-package-agreements --accept-source-agreements" -PassThru -NoNewWindow
            $p.WaitForExit(180000)
            if ($p.ExitCode -eq 0) { 
                Write-Host "Winget install completed successfully." 
            } else {
                Write-Warning "Winget install failed with Exit Code: $($p.ExitCode). Trying manual MSI/Choco."
            }
        }
        
        # 1.2) Find executable after install attempts
        $ADExe = $null
        $possible = @(
          "$env:ProgramFiles\AnyDesk\AnyDesk.exe",
          "$env:ProgramFiles(x86)\AnyDesk\AnyDesk.exe",
          "C:\ProgramData\chocolatey\bin\AnyDesk.exe",
          "C:\ProgramData\chocolatey\lib\anydesk.portable\tools\AnyDesk.exe"
        )
        $ADExe = $possible | Where-Object { Test-Path $_ } | Select-Object -First 1

        if (-not $ADExe) {
            Write-Error "AnyDesk executable not found after install attempts. Aborting."
            echo "ANYDESK_ID=NOT_AVAILABLE" | Out-File -FilePath $env:GITHUB_ENV -Append
            exit 1
        }
        Write-Host "Using AnyDesk binary: $ADExe"

        # --- 2) Configuration (Permission Profile Logic) ---
        
        # 2.1) Ensure AnyDesk service is running (System-level)
        if (-not (Get-Service -Name "AnyDesk" -ErrorAction SilentlyContinue)) {
            Write-Host "Installing AnyDesk service..."
            Start-Process -FilePath $ADExe -ArgumentList "--install-service" -Wait -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 4
        }
        Start-Service -Name "AnyDesk" -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 3

        # 2.2) Create Permission Profile via CLI with password
        $profileName = "unattended_auto_profile"
        $pw = $env:ANYDESK_PASS
        
        Write-Host "Creating permission profile '$profileName' and setting password (via CLI)..."
        $perms = "+audio +input +clipboard +clipboard_files +file_manager +restart +lock_desk +sysinfo +whiteboard +tcp_tunnel +vpn +user_pointer +privacy_feature +record_session"
        $pw | & $ADExe --add-profile $profileName $perms 2>&1 | Tee-Object -Variable addprof_out
        Write-Host "add-profile output (last lines):"
        $addprof_out | Select-Object -Last 20 | ForEach-Object { Write-Host $_ }

        # 2.3) Configure HKLM keys to activate the Permission Profile
        $reg = "HKLM:\SOFTWARE\AnyDesk\ad.security.permission_profiles"
        if (-not (Test-Path $reg)) { New-Item -Path $reg -Force | Out-Null }

        Write-Host "Writing registry keys to enable permission profile and unattended access..."
        Set-ItemProperty -Path $reg -Name "define.profile1" -Value $profileName -Force -ErrorAction SilentlyContinue
        Set-ItemProperty -Path $reg -Name "enable_previous_session" -Value 1 -Force -ErrorAction SilentlyContinue
        
        $rootReg = "HKLM:\SOFTWARE\AnyDesk"
        if (-not (Test-Path $rootReg)) { New-Item -Path $rootReg -Force | Out-Null }
        Set-ItemProperty -Path $rootReg -Name "enable_uaccess_permissions" -Value "true" -Force -ErrorAction SilentlyContinue

        # 2.4) Restart service to apply all settings
        Restart-Service -Name "AnyDesk" -Force -ErrorAction SilentlyContinue
        Start-Sleep -Seconds 4

        # 2.5) Retrieve AnyDesk ID 
        $ADID = $null
        $retries = 0
        Write-Host "Attempting to retrieve AnyDesk ID (Max 60s Wait)..."
        # The service needs a moment to initialize the ID
        while (-not $ADID -and $retries -lt 12) {
            try {
                $raw = (& "$ADExe" --get-id 2>$null | Out-String).Trim()
                if ($raw -match '\d{6,12}') { $ADID = $Matches[0] } else { $ADID = $raw.Trim() }
            } catch {}
            if (-not $ADID) { Start-Sleep -Seconds 5 }
            $retries++
        }

        if ($ADID -and $ADID -ne 'True' -and $ADID -ne 'False') {
            Write-Host "SUCCESS: AnyDesk ID: $ADID"
            echo "ANYDESK_ID=$ADID" | Out-File -FilePath $env:GITHUB_ENV -Append
        } else {
            Write-Warning "Could not retrieve valid AnyDesk ID. Continuing."
            echo "ANYDESK_ID=NOT_AVAILABLE" | Out-File -FilePath $env:GITHUB_ENV -Append
        }
        
        # 2.6) Debug info
        Write-Host "=== Debug: AnyDesk service status ==="
        Get-Service -Name "AnyDesk" | Format-List | ForEach-Object { Write-Host $_ }
        Write-Host "=== Debug: permission_profiles registry keys (sample) ==="
        Get-ItemProperty -Path $reg -ErrorAction SilentlyContinue | Format-List | ForEach-Object { Write-Host $_ }
        Write-Host "=== Done: attempt to enable unattended access finished ==="
      shell: powershell


    # 6.5. فتح منفذ AnyDesk في جدار الحماية (unchanged)
    - name: Open AnyDesk Firewall Port (TCP 6568)
      run: |
        Write-Host "Opening AnyDesk Firewall Port (TCP 6568)..."
        try {
            Get-NetFirewallRule -DisplayName "AnyDesk_TCP_6568_Inbound" -ErrorAction SilentlyContinue | Remove-NetFirewallRule -Confirm:$false -ErrorAction SilentlyContinue
            New-NetFirewallRule -DisplayName "AnyDesk_TCP_6568_Inbound" -Direction Inbound -Protocol TCP -LocalPort 6568 -Action Allow -Profile Any
            Write-Host "Successfully opened TCP 6568."
        } catch {
            Write-Warning "Failed to open AnyDesk firewall port."
        }
      shell: powershell


    # 7. تكوين RDP و إنشاء المستخدم (unchanged)
    - name: Configure RDP User and Set Password
      run: |
        $password = $env:RDP_PASS
        $securePass = ConvertTo-SecureString $password -AsPlainText -Force

        if (-not (Get-LocalUser -Name "$env:RDP_USER" -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name "$env:RDP_USER" -Password $securePass -AccountNeverExpires
        }

        Add-LocalGroupMember -Group "Administrators" -Member "$env:RDP_USER"
        Add-LocalGroupMember -Group "Remote Desktop Users" -Member "$env:RDP_USER"

        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
        Restart-Service -Name TermService -Force
      shell: powershell

    # 8. طباعة بيانات الاتصال (unchanged)
    - name: Display Connection Details
      run: |
        $ADID = $env:ANYDESK_ID
        if (-not $ADID) { $ADID = "NOT_AVAILABLE" }

        Write-Output "--------------------------------------------------------"
        Write-Output "          SHADOWHACKER-GOD: DUAL CONNECTION INFO         "
        Write-Output "--------------------------------------------------------"
        Write-Output "   A. RDP Connection via Tailscale (Primary):"
        Write-Output "      - User: $env:RDP_USER"
        Write-Output "      - RDP Password: ${{ secrets.RDP_PASSWORD }}"
        Write-Output "      - IP/Address: $env:TAILSCALE_IP"
        Write-Output "--------------------------------------------------------"
        Write-Output "   B. AnyDesk Connection (Fallback):"
        Write-Output "      - AnyDesk ID: $ADID"
        Write-Output "      - AnyDesk Password: ${{ secrets.ANYDESK_PASSWORD }}"
        Write-Output "      **Note: If ID is 'NOT_AVAILABLE', use Tailscale only.**"
        Write-Output "--------------------------------------------------------"
      shell: powershell

    # 9. حلقة الحفظ والإغلاق (unchanged)
    - name: Keep Alive and Data Sync Loop (Safe Shutdown)
      run: |
        Start-Sleep -Seconds 21000
        Write-Host "--- Executing final data save to Gist (5h 50m mark) ---"
        python ./scripts/save_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
        Write-Host "Data saved successfully. Shutting down. Auto-restart imminent."
      shell: powershell
