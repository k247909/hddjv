# .github/workflows/aeon-rustdesk.yml
name: AEON-RDP-RUSTDESK-TAILSCALE

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # 1. إعداد المتغيرات السرية والبيئة
    - name: Setup environment variables
      shell: powershell
      run: |
        Write-Host "--- Loading Environment Variables and Secrets ---"
        echo "RUSTDESK_PASS=${{ secrets.RUSTDESK_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "PERSISTENT_DIR=C:\Users\runneradmin\PersistentData" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_ID=${{ secrets.GIST_ID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "RD_VERSION=1.2.6" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "INSTALL_DIR=$env:ProgramFiles\RustDesk" | Out-File -FilePath $env:GITHUB_ENV -Append

    # 2. تثبيت Python (لـ Gist)
    - name: Install Python (for Gist sync scripts)
      shell: cmd
      run: pip install requests

    # 3. استعادة البيانات الدائمة
    - name: Restore persistent data (if any)
      shell: pwsh
      run: |
        mkdir $env:PERSISTENT_DIR -Force
        if (Test-Path ./scripts/restore_data.py) {
          python ./scripts/restore_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
        } else {
          Write-Host "No restore script found; skipping."
        }

    # 4. تثبيت Tailscale (الطريقة الاحتياطية الموثوقة)
    - name: Install and Authenticate Tailscale
      shell: powershell
      run: |
        Write-Host "=== Installing Tailscale for Backup Access ==="
        $tsAuthKey = "${{ secrets.TAILSCALE_AUTH_KEY }}" 
        if (-not $tsAuthKey) {
            Write-Warning "TAILSCALE_AUTH_KEY secret is missing. Skipping Tailscale."
            exit 0
        }
        
        Write-Host "Downloading Tailscale..."
        $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest.exe"
        $installerPath = "$env:TEMP\tailscale.exe"
        Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
        
        Write-Host "Installing Tailscale..."
        Start-Process $installerPath -ArgumentList "/S" -Wait
        
        $runnerHostname = "gh-rustdesk-$env:GITHUB_RUN_ID"
        Write-Host "Authenticating Tailscale with Hostname: $runnerHostname"
        & "C:\Program Files\Tailscale\tailscale.exe" up --authkey $tsAuthKey --hostname $runnerHostname --accept-routes --reset
        
        # انتظار واسترجاع IP
        $tsIP = $null
        $retries = 0
        while (-not $tsIP -and $retries -lt 15) {
            Start-Sleep -Seconds 5
            $tsIP = (& "C:\Program Files\Tailscale\tailscale.exe" ip -4 2>$null).Trim()
            if ($tsIP -match '^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$') {
                break
            }
            $tsIP = $null
            $retries++
        }
        
        if ($tsIP) {
            Write-Host "Tailscale IP: $tsIP"
            echo "TAILSCALE_IP=$tsIP" | Out-File -FilePath $env:GITHUB_ENV -Append
            "$tsIP" | Out-File -FilePath (Join-Path $env:PERSISTENT_DIR "tailscale_ip.txt") -Force
        } else {
            Write-Warning "CRITICAL: Failed to retrieve a valid Tailscale IP after multiple attempts."
        }
        
    # 5. تثبيت RustDesk (استخدام MSI)
    - name: Install RustDesk (MSI method)
      shell: pwsh
      run: |
        Write-Host "=== Installing RustDesk (MSI Method) ==="
        $version = $env:RD_VERSION
        $msiUrl = "https://github.com/rustdesk/rustdesk/releases/download/$version/rustdesk-$version-x86_64.msi"
        $msiPath = Join-Path $env:TEMP "rustdesk-$version-x86_64.msi"
        
        try {
          Invoke-WebRequest -Uri $msiUrl -OutFile $msiPath -UseBasicParsing -TimeoutSec 120 -ErrorAction Stop
        } catch {
          Write-Error "Failed to download MSI: $($_.Exception.Message)"; exit 1
        }
        
        Write-Host "Running msiexec /qn with 180s timeout..."
        $proc = Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "`"$msiPath`"", "/qn", "/norestart" -PassThru
        $sw = [Diagnostics.Stopwatch]::StartNew()
        $timeout = 180
        while (-not $proc.HasExited -and $sw.Elapsed.TotalSeconds -lt $timeout) { Start-Sleep -Seconds 2 }
        
        $candidates = @("$env:ProgramFiles\RustDesk\rustdesk.exe", "$env:ProgramFiles(x86)\RustDesk\rustdesk.exe")
        $rustdeskExe = $null
        foreach ($p in $candidates) { if (Test-Path $p) { $rustdeskExe = $p; break } }
        
        if (-not $rustdeskExe) {
          Write-Error "CRITICAL: rustdesk.exe not found after install."; exit 1
        }
        echo "RUSTDESK_EXE=$rustdeskExe" | Out-File -FilePath $env:GITHUB_ENV -Append
        Write-Host "Detected rustdesk.exe at: $rustdeskExe"

    # 6. التأكد من تشغيل الخدمة (مع انتظار أطول)
    - name: Ensure RustDesk service installed & running
      shell: pwsh
      run: |
        Write-Host "=== Ensuring RustDesk service is installed and running ==="
        $exe = $env:RUSTDESK_EXE
        if (-not (Test-Path $exe)) { Write-Error "rustdesk.exe missing: $exe"; exit 1 }

        # محاولة تثبيت الخدمة
        Write-Host "Attempting to install service..."
        & $exe --install-service 2>$null
        
        # انتظار 15 ثانية لتهيئة الخدمة
        Start-Sleep -Seconds 15 
        
        $svcNameCandidates = @("RustDesk","rustdesk")
        $foundSvc = $null
        $wait = 0
        while (-not $foundSvc -and $wait -lt 60) {
          foreach ($n in $svcNameCandidates) {
            $s = Get-Service -Name $n -ErrorAction SilentlyContinue
            if ($s) { $foundSvc = $s; break }
          }
          if (-not $foundSvc) { Start-Sleep -Seconds 3; $wait += 3 }
        }

        if ($foundSvc -and $foundSvc.Status -ne 'Running') {
            try { Start-Service -Name $foundSvc.Name -ErrorAction SilentlyContinue; Start-Sleep -Seconds 5 } catch {}
            Write-Host "Service final status: $(Get-Service -Name $foundSvc.Name | Select-Object -ExpandProperty Status)"
        }

    # 7. تكوين RustDesk واسترجاع ID (تطبيق تصفير الـ ID لضمان التوليد)
    - name: Configure RustDesk Unattended Access and Retrieve ID (Robust)
      shell: pwsh
      run: |
        Write-Host "=== Configuring RustDesk Unattended Access & Retrieving ID ==="
        $exe = $env:RUSTDESK_EXE
        $pass = $env:RUSTDESK_PASS
        $persistDir = $env:PERSISTENT_DIR
        $serviceConfigPath = "C:\Windows\ServiceProfiles\LocalService\AppData\Roaming\RustDesk\config\RustDesk.toml"

        # 1) Set permanent password
        Write-Host "Setting permanent password (CLI)..."
        & $exe --password $pass 2>&1 | Write-Host
        Start-Sleep -Seconds 8
        
        # === الخطوة الجديدة: تصفير الـ ID لضمان توليد ID جديد في بيئة CI ===
        if (Test-Path $serviceConfigPath) {
            Write-Host "Found TOML config. Forcing ID regeneration by setting id = '0'."
            # قراءة المحتوى
            $content = Get-Content -Path $serviceConfigPath -Raw -ErrorAction SilentlyContinue

            # تعديل قيمة id إلى '0'. نستخدم -Raw لضمان التعامل مع الملف بالكامل.
            $newContent = $content -replace "id\s*=\s*'.*?'", "id = '0'"
            
            # إذا لم يتم العثور على id، نضيفه في بداية [options] (أقل احتمالا)
            if ($content -eq $newContent -and $newContent -match '\[options\]') {
                $newContent = $newContent -replace '\[options\]', "[options]`nid = '0'"
            }
            
            # الكتابة فوق الملف.
            $newContent | Out-File -FilePath $serviceConfigPath -Encoding UTF8 -Force
            
            Write-Host "Restarting service to force new ID generation..."
            try { Stop-Service -Name RustDesk -ErrorAction SilentlyContinue } catch {}
            Start-Sleep -Seconds 5
            try { Start-Service -Name RustDesk -ErrorAction SilentlyContinue } catch {}
            Start-Sleep -Seconds 15
        } else {
            Write-Warning "TOML config not found yet. Skipping ID force regeneration, relying on service start."
        }
        # === نهاية خطوة التصفير ===


        # 2) Wait for ID by checking Service Config and CLI
        $id = $null
        $attempts = 0
        $maxAttempts = 240 # 20 minutes (4 times the previous failed limit)
        
        Write-Host "Waiting for ID by checking TOML config and CLI..."
        
        while (-not $id -and $attempts -lt $maxAttempts) {
            
            # Try 1: Check the Service's TOML config file
            if (Test-Path $serviceConfigPath) {
                try {
                    $content = Get-Content -Path $serviceConfigPath -ErrorAction SilentlyContinue | Out-String
                    # نبحث عن ID أكبر من 0 (لأننا صفرناه)
                    if ($content -match "id\s*=\s*'(\d{6,12})'") {
                        $potentialId = $Matches[1].Trim()
                        if ($potentialId -ne '0') {
                            $id = $potentialId
                            Write-Host "Found new generated ID [$id] in service TOML config!"
                            break
                        }
                    }
                } catch {}
            }
            
            # Try 2: Fallback to CLI --get-id
            try {
                $cliOut = & $exe --get-id 2>$null
                if ($cliOut -match '(\d{6,12})') {
                    $potentialId = $cliOut.Trim()
                    if ($potentialId -ne '0') {
                        $id = $potentialId
                        Write-Host "Found new generated ID [$id] via CLI!"
                        break
                    }
                }
            } catch {}

            Start-Sleep -Seconds 5
            $attempts++
            Write-Host "Waiting for ID... attempt $attempts/$maxAttempts"
        }

        if (-not $id) {
          Write-Error "CRITICAL: Could not determine RustDesk ID after $($attempts) attempts."
          exit 1
        }

        # Save ID to env and persistent directory
        echo "RUSTDESK_ID=$id" | Out-File -FilePath $env:GITHUB_ENV -Append
        "$id" | Out-File -FilePath (Join-Path $persistDir "rustdesk_id.txt") -Force

        Write-Host "✅ RustDesk ID determined: $id"

    # 8. طباعة بيانات الاتصال
    - name: Display connection details
      shell: pwsh
      run: |
        Write-Output "--------------------------------------------------------"
        Write-Output "         SHADOWHACKER-GOD: RUSTDESK & TAILSCALE         "
        Write-Output "--------------------------------------------------------"
        Write-Output "      - RustDesk ID (الأساسي): $env:RUSTDESK_ID"
        Write-Output "      - Password (كلمة المرور): ${{ secrets.RUSTDESK_PASSWORD }}"
        Write-Output "--------------------------------------------------------"
        Write-Output "      - Tailscale IP (الاحتياطي): $env:TAILSCALE_IP"
        Write-Output "      - Tailscale Hostname: gh-rustdesk-$env:GITHUB_RUN_ID"
        Write-Output "      - Tailscale ملاحظة: يتطلب Tailscale على جهازك المحلي."
        Write-Output "--------------------------------------------------------"

    # 9. حفظ البيانات النهائية
    - name: Final Keep Alive Loop and Save data to Gist
      shell: pwsh
      run: |
        Write-Host "Keeping runner alive for 5h 50m..."
        Start-Sleep -Seconds 21000
        
        Write-Host "--- Executing final data save to Gist ---"
        if (Test-Path ./scripts/save_data.py -and $env:GIST_ID -and $env:GIST_TOKEN) {
          python ./scripts/save_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
        } else {
          Write-Host "No save script or gist creds; skipping final save."
        }
        
        Write-Host "Shutting down runner."
