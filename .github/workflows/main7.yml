# SHADOWHACKER-GOD: RDP Workflow (Stable RustDesk FINAL Version)
# Auto-installs RustDesk, sets unattended password, retrieves ID reliably, and manages Gist data.

name: AEON-RDP-RUSTDESK-FINAL-STABLE

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - uses: actions/checkout@v3
    
    # 1. إعداد المتغيرات السرية والبيئة
    - name: Setup Environment Variables
      run: |
        Write-Host "--- Loading Environment Variables and Secrets ---"
        echo "RUSTDESK_PASS=${{ secrets.RUSTDESK_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "PERSISTENT_DIR=C:\Users\runneradmin\PersistentData" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_ID=${{ secrets.GIST_ID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        # متغير للإصدار
        echo "RD_VERSION=1.2.6" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: powershell

    # 2. تثبيت Python (لحفظ/استعادة البيانات)
    - name: Install Python Libraries for Gist Access
      run: pip install requests
      shell: cmd

    # 3. استعادة البيانات الدائمة (للحصول على ID القديم إن وجد)
    - name: Restore Persistent Data from Gist
      run: |
        mkdir $env:PERSISTENT_DIR -Force
        # استدعاء ملف restore_data.py
        python ./scripts/restore_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
      shell: pwsh

    # 4. تثبيت RustDesk بصمت (مُحسَّن)
    - name: Install RustDesk Silently (Reliable)
      run: |
        Write-Host "=== Installing RustDesk (Reliable Method) ==="
        $version = $env:RD_VERSION
        $exeUrl = "https://github.com/rustdesk/rustdesk/releases/download/$version/rustdesk-$version-x86_64.exe"
        $exePath = "$env:TEMP\rustdesk-$version-x86_64.exe"
        
        Write-Host "Downloading RustDesk $version..."
        Invoke-WebRequest -Uri $exeUrl -OutFile $exePath -UseBasicParsing

        Write-Host "Running silent installer..."
        # استخدام -Wait يضمن عدم المتابعة حتى ينتهي المثبت
        Start-Process -FilePath $exePath -ArgumentList "--silent-install" -Wait
        Start-Sleep -Seconds 10 # إعطاء مهلة إضافية لبدء الخدمة

        # تحديد المسار التنفيذي (RustDesk يمكن أن يتثبت في Program Files أو AppData)
        $defaultPath = "$env:ProgramFiles\RustDesk\rustdesk.exe"
        $userPath = "$env:AppData\RustDesk\rustdesk.exe"
        $rustdeskExe = $null

        if (Test-Path $defaultPath) { $rustdeskExe = $defaultPath }
        elseif (Test-Path $userPath) { $rustdeskExe = $userPath }
        
        if (-not $rustdeskExe) {
          Write-Error "CRITICAL: RustDesk executable not found after install in expected paths."
          exit 1
        }

        echo "RUSTDESK_EXE=$rustdeskExe" | Out-File -FilePath $env:GITHUB_ENV -Append
        Write-Host "RustDesk installed successfully at $rustdeskExe"
      shell: powershell

    # 5. التحقق من تشغيل الخدمة
    - name: Wait for RustDesk Service to be Ready
      run: |
        Write-Host "=== Ensuring RustDesk service is running ==="
        $serviceNames = @("RustDesk","rustdesk")
        $maxWait = 120
        $wait = 0
        $found = $false
        
        # محاولة بدء الخدمة والانتظار حتى 120 ثانية
        while ($wait -lt $maxWait -and -not $found) {
            foreach ($s in $serviceNames) {
                $svc = Get-Service -Name $s -ErrorAction SilentlyContinue
                if ($svc) {
                    if ($svc.Status -ne 'Running') { 
                        Write-Host "Starting service '$($svc.Name)'..."
                        Start-Service -Name $svc.Name -ErrorAction SilentlyContinue 
                    }
                    $found = $true
                    break
                }
            }
            if (-not $found) { Start-Sleep -Seconds 5; $wait += 5 }
        }

        if (-not $found) {
            Write-Warning "RustDesk service not detected or ready after $maxWait seconds. This might affect ID retrieval."
        } else {
            Write-Host "RustDesk service is running."
        }
      shell: powershell

    # 6. إعداد كلمة مرور الوصول غير المراقب والحصول على ID (مُحسَّن)
    - name: Configure RustDesk and Retrieve ID
      run: |
        Write-Host "=== Configuring RustDesk Unattended Access ==="
        $rustdeskExe = $env:RUSTDESK_EXE
        $rdPass = $env:RUSTDESK_PASS

        if (-not (Test-Path $rustdeskExe)) {
            Write-Error "CRITICAL: RustDesk executable not found: $rustdeskExe"
            exit 1
        }

        # 6.1 تعيين كلمة المرور
        Write-Host "Setting permanent password..."
        & $rustdeskExe --password $rdPass
        Write-Host "Password set."
        Start-Sleep -Seconds 10 # انتظار لتطبيق كلمة المرور

        # 6.2 محاولة الحصول على الـ ID (20 محاولة * 5 ثواني = 100 ثانية)
        Write-Host "Retrieving RustDesk ID..."
        $rdID = $null
        $attempts = 0
        while (-not $rdID -and $attempts -lt 20) {
            # إهمال الأخطاء التي قد تظهر من --get-id
            $output = & $rustdeskExe --get-id 2>$null 
            
            # التحقق من أن الناتج هو رقم ID صحيح (9 أرقام)
            if ($output -match '^\d{9}$') {
                $rdID = $output.Trim()
                break
            }
            
            Write-Host "Waiting for RustDesk ID to register with server... ($($attempts+1)/20)"
            Start-Sleep -Seconds 5
            $attempts++
        }

        if (-not $rdID) {
            Write-Error "CRITICAL: RustDesk ID could not be retrieved after multiple attempts. Access will fail."
            exit 1
        }

        # 6.3 حفظ الـ ID في البيئة وفي Gist
        echo "RUSTDESK_ID=$rdID" | Out-File -FilePath $env:GITHUB_ENV -Append
        "$rdID" | Out-File -FilePath "$env:PERSISTENT_DIR\rustdesk_id.txt" -Force

        Write-Host "RustDesk ID: $rdID"
        Write-Host "=== Configuration Complete ==="
      shell: powershell

    # 7. طباعة بيانات الاتصال
    - name: Display Connection Info
      run: |
        Write-Output "----------------------------------------------"
        Write-Output "  🔐 RustDesk Remote Access Information"
        Write-Output "----------------------------------------------"
        Write-Output "ID: $env:RUSTDESK_ID"
        Write-Output "Password: ${{ secrets.RUSTDESK_PASSWORD }}"
        Write-Output "----------------------------------------------"
        Write-Output "💡 استخدم RustDesk على جهازك المحلي وأدخل هذه البيانات للاتصال"
      shell: powershell

    # 8. حلقة الحفظ والإغلاق (Keep Alive)
    - name: Final Keep Alive Loop and Data Save
      run: |
        Write-Host "Keeping session alive for 5h 50m..."
        Start-Sleep -Seconds 21000 # 350 minutes
        
        Write-Host "--- Executing final data save to Gist ---"
        # استدعاء ملف save_data.py لرفع rustdesk_id.txt وبقية البيانات
        python ./scripts/save_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
        
        # إيقاف الخدمة قبل إغلاق runner
        Stop-Service -Name "RustDesk" -ErrorAction SilentlyContinue
        
        Write-Host "Data saved successfully. Shutting down."
      shell: powershell
