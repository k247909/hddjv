# .github/workflows/aeon-rustdesk.yml
name: AEON-RDP-RUSTDESK-ONLY

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # 1. إعداد المتغيرات السرية والبيئة
    - name: Setup environment variables
      shell: powershell
      run: |
        Write-Host "--- Loading Environment Variables and Secrets ---"
        # يجب أن تكون RUSTDESK_PASSWORD و RUSTDESK_STATIC_ID محددة في GitHub Secrets
        echo "RUSTDESK_PASS=${{ secrets.RUSTDESK_PASSWORD }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "RUSTDESK_STATIC_ID=${{ secrets.RUSTDESK_STATIC_ID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "PERSISTENT_DIR=C:\Users\runneradmin\PersistentData" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_TOKEN=${{ secrets.GIST_TOKEN }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "GIST_ID=${{ secrets.GIST_ID }}" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "RD_VERSION=1.2.6" | Out-File -FilePath $env:GITHUB_ENV -Append
        echo "INSTALL_DIR=$env:ProgramFiles\RustDesk" | Out-File -FilePath $env:GITHUB_ENV -Append

    # 2. تثبيت Python (لـ Gist)
    - name: Install Python (for Gist sync scripts)
      shell: cmd
      run: pip install requests

    # 3. استعادة البيانات الدائمة
    - name: Restore persistent data (if any)
      shell: pwsh
      run: |
        mkdir $env:PERSISTENT_DIR -Force
        if (Test-Path ./scripts/restore_data.py) {
          python ./scripts/restore_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
        } else {
          Write-Host "No restore script found; skipping."
        }

    # 4. تثبيت RustDesk (استخدام MSI)
    - name: Install RustDesk (MSI method)
      shell: pwsh
      run: |
        Write-Host "=== Installing RustDesk (MSI Method) ==="
        $version = $env:RD_VERSION
        $msiUrl = "https://github.com/rustdesk/rustdesk/releases/download/$version/rustdesk-$version-x86_64.msi"
        $msiPath = Join-Path $env:TEMP "rustdesk-$version-x86_64.msi"
        
        try {
          Invoke-WebRequest -Uri $msiUrl -OutFile $msiPath -UseBasicParsing -TimeoutSec 120 -ErrorAction Stop
        } catch {
          Write-Error "Failed to download MSI: $($_.Exception.Message)"; exit 1
        }
        
        Write-Host "Running msiexec /qn with 180s timeout..."
        $proc = Start-Process -FilePath "msiexec.exe" -ArgumentList "/i", "`"$msiPath`"", "/qn", "/norestart" -PassThru
        $sw = [Diagnostics.Stopwatch]::StartNew()
        $timeout = 180
        while (-not $proc.HasExited -and $sw.Elapsed.TotalSeconds -lt $timeout) { Start-Sleep -Seconds 2 }
        
        $candidates = @("$env:ProgramFiles\RustDesk\rustdesk.exe", "$env:ProgramFiles(x86)\RustDesk\rustdesk.exe")
        $rustdeskExe = $null
        foreach ($p in $candidates) { if (Test-Path $p) { $rustdeskExe = $p; break } }
        
        if (-not $rustdeskExe) {
          Write-Error "CRITICAL: rustdesk.exe not found after install."; exit 1
        }
        echo "RUSTDESK_EXE=$rustdeskExe" | Out-File -FilePath $env:GITHUB_ENV -Append
        Write-Host "Detected rustdesk.exe at: $rustdeskExe"

    # 5. التأكد من تشغيل الخدمة
    - name: Ensure RustDesk service installed & running
      shell: pwsh
      run: |
        Write-Host "=== Ensuring RustDesk service is installed and running ==="
        $exe = $env:RUSTDESK_EXE
        if (-not (Test-Path $exe)) { Write-Error "rustdesk.exe missing: $exe"; exit 1 }

        # محاولة تثبيت وتشغيل الخدمة
        Write-Host "Attempting to install service..."
        & $exe --install-service 2>$null
        
        # انتظار الخدمة لبدء العمل وإنشاء ملفات الإعداد
        Start-Sleep -Seconds 20 
        
        $svcNameCandidates = @("RustDesk","rustdesk")
        $foundSvc = $null
        $wait = 0
        while (-not $foundSvc -and $wait -lt 60) {
          foreach ($n in $svcNameCandidates) {
            $s = Get-Service -Name $n -ErrorAction SilentlyContinue
            if ($s) { $foundSvc = $s; break }
          }
          if (-not $foundSvc) { Start-Sleep -Seconds 3; $wait += 3 }
        }

        if ($foundSvc -and $foundSvc.Status -ne 'Running') {
            try { Start-Service -Name $foundSvc.Name -ErrorAction SilentlyContinue; Start-Sleep -Seconds 5 } catch {}
            Write-Host "Service final status: $(Get-Service -Name $foundSvc.Name | Select-Object -ExpandProperty Status)"
        }

    # 6. تعيين ID الثابت وكلمة المرور والتحقق (مع إعادة المحاولة)
    - name: Set Static ID and Verify Configuration (with Retries)
      shell: pwsh
      run: |
        Write-Host "=== Configuring Static ID and Verifying Configuration (with Retries) ==="
        $exe = $env:RUSTDESK_EXE
        $pass = $env:RUSTDESK_PASS
        $staticId = $env:RUSTDESK_STATIC_ID
        $persistDir = $env:PERSISTENT_DIR
        $configDir = "C:\Windows\ServiceProfiles\LocalService\AppData\Roaming\RustDesk\config"
        $serviceConfigPath = Join-Path $configDir "RustDesk.toml"

        if (-not $staticId) {
            Write-Error "CRITICAL: RUSTDESK_STATIC_ID secret is missing. Cannot set static ID."
            exit 1
        }

        $maxRetries = 3
        $currentAttempt = 1
        $verificationSuccess = $false

        while ($currentAttempt -le $maxRetries) {
            Write-Host "--- Attempt $currentAttempt/$maxRetries to set and verify Static ID ---"

            # 1) إيقاف الخدمة لضمان تعديل الملف
            Write-Host "Stopping service..."
            try { Stop-Service -Name RustDesk -ErrorAction SilentlyContinue } catch {}
            Start-Sleep -Seconds 5
            
            # 2) تعيين كلمة المرور عبر CLI (يضمن وجود المجلدات)
            Write-Host "Setting permanent password (CLI)..."
            & $exe --password $pass 2>&1 | Write-Host
            Start-Sleep -Seconds 5
            
            # 3) التأكد من وجود مجلد الإعدادات
            if (-not (Test-Path $configDir)) {
                Write-Host "Config directory not found. Trying to create it."
                mkdir $configDir -Force
            }
            
            # 4) إنشاء الملف إذا لم يكن موجوداً
            if (-not (Test-Path $serviceConfigPath)) {
                Write-Host "TOML config file not found. Creating a minimal file."
                @("[options]", "id = '0'", "password = ''") | Out-File -FilePath $serviceConfigPath -Encoding UTF8 -Force
                Start-Sleep -Seconds 2
            }

            # 5) تعديل ملف TOML لتعيين ID الثابت
            Write-Host "Attempting to set static id = '$staticId' in TOML."
            $content = Get-Content -Path $serviceConfigPath -Raw -ErrorAction SilentlyContinue
            $newContent = $content
            $idRegex = "id\s*=\s*'.*?'"
            
            # استبدال ID القديم بالثابت الجديد
            $newContent = $newContent -replace $idRegex, "id = '$staticId'"
            
            # الكتابة فوق الملف
            $newContent | Out-File -FilePath $serviceConfigPath -Encoding UTF8 -Force
            
            # 6) إعادة تشغيل الخدمة لتحميل ID الثابت
            Write-Host "Restarting service to load Static ID..."
            try { Start-Service -Name RustDesk -ErrorAction SilentlyContinue } catch {}
            Start-Sleep -Seconds 15 
            
            # 7) التحقق من تطبيق ID
            Write-Host "Verifying static ID in config file after restart..."
            $checkWaitAttempts = 12 # 1 minute wait
            $currentCheckAttempt = 0
            $verifiedId = $null
            $checkId = "N/A" # تهيئة للمرة الأولى

            while ($currentCheckAttempt -lt $checkWaitAttempts) {
                $currentContent = Get-Content -Path $serviceConfigPath -Raw -ErrorAction SilentlyContinue
                if ($currentContent -match "id\s*=\s*'(\d{6,12})'") {
                    $checkId = $Matches[1].Trim()
                    if ($checkId -eq $staticId) {
                        $verifiedId = $staticId
                        Write-Host "✅ Verification successful: Config file now shows ID [$verifiedId]."
                        $verificationSuccess = $true
                        break
                    }
                }
                Start-Sleep -Seconds 5
                $currentCheckAttempt++
            }
            
            if ($verificationSuccess) {
                break # الخروج من حلقة المحاولة الرئيسية
            }

            Write-Warning "Verification failed on attempt $currentAttempt. ID found: $checkId. Retrying in 10 seconds..."
            $currentAttempt++
            Start-Sleep -Seconds 10 
        }

        if (-not $verificationSuccess) {
            Write-Error "CRITICAL: Static ID [$staticId] failed to set and verify after $maxRetries attempts."
            exit 1
        }
        
        # 8) حفظ ID الثابت في المتغيرات
        echo "RUSTDESK_ID=$staticId" | Out-File -FilePath $env:GITHUB_ENV -Append
        "$staticId" | Out-File -FilePath (Join-Path $persistDir "rustdesk_id.txt") -Force

        Write-Host "✅ RustDesk Static ID successfully set and verified: $staticId"

    # 7. طباعة بيانات الاتصال
    - name: Display connection details
      shell: pwsh
      run: |
        Write-Output "--------------------------------------------------------"
        Write-Output "         SHADOWHACKER-GOD: RUSTDESK ACCESS DETAILS      "
        Write-Output "--------------------------------------------------------"
        Write-Output "      - RustDesk ID (الثابت): $env:RUSTDESK_ID"
        Write-Output "      - Password (كلمة المرور): ${{ secrets.RUSTDESK_PASSWORD }}"
        Write-Output "      - User (اسم المستخدم): runneradmin"
        Write-Output "--------------------------------------------------------"

    # 8. حفظ البيانات النهائية
    - name: Final Keep Alive Loop and Save data to Gist
      shell: pwsh
      run: |
        Write-Host "Keeping runner alive for 5h 50m..."
        Start-Sleep -Seconds 21000
        
        Write-Host "--- Executing final data save to Gist ---"
        if (Test-Path ./scripts/save_data.py -and $env:GIST_ID -and $env:GIST_TOKEN) {
          python ./scripts/save_data.py $env:GIST_ID $env:GIST_TOKEN $env:PERSISTENT_DIR
        } else {
          Write-Host "No save script or gist creds; skipping final save."
        }
        
        Write-Host "Shutting down runner."
